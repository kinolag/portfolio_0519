{"version":3,"sources":["components/Intro.js","components/Background.js","App.js","serviceWorker.js","index.js","img/ball_tras_640_i.png"],"names":["Intro","react_default","a","createElement","className","React","Component","Background","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","_this2","options","newColor","Math","floor","random","length","setState","document","querySelector","style","backgroundColor","_this3","onClick","randomColor","App","Intro_Intro","src","ball","alt","href","target","rel","title","Background_Background","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+NAGqBA,mLAGb,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,wBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,iCANuBC,IAAMC,WCApBC,cACjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,MAAO,WAHDR,6EAOA,IAAAS,EAAAN,KACNO,EAAU,CAAC,UAAW,UAAW,UAAW,iBAC5CC,EAAWD,EAAQE,KAAKC,MAAMD,KAAKE,SAAYJ,EAAQK,SAEvDJ,IAAaR,KAAKI,MAAMC,OACxBL,KAAKa,SAAS,CACVR,MAAOG,GAEX,WAAOM,SAASC,cAAc,QAAQC,MAAMC,gBAAkBX,EAAKF,MAAMC,yCAOxE,IAAAa,EAAAlB,KAEL,OACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,2BAAmBQ,KAAKI,MAAMC,OAC9Bf,EAAAC,EAAAC,cAAA,UAAQ2B,QAAS,kBAAMD,EAAKE,gBAA5B,mCA5B4B1B,IAAMC,2BCyB/B0B,MAtBf,WACE,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAW8B,IAAKC,IAAMC,IAAI,gBAE3CnC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,kBACAH,EAAAC,EAAAC,cAAA,KACEC,UAAU,QACViC,KAAK,oBACLC,OAAO,SACPC,IAAI,sBACJC,MAAM,WALR,cASAvC,EAAAC,EAAAC,cAACsC,EAAD,QCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASxB,SAASyB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.954107af.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default class Intro extends React.Component {\n\n    render() {\n        return(\n        <div>\n            <h3 className='is-white'>Basic portfolio page</h3>\n            <h5 className='is-white'>developed in React.js</h5>\n        </div>\n        );\n    }\n}","import React from 'react';\n\n\nexport default class Background extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            color: '#112211'\n        };  \n    }  \n\n    randomColor() {\n        let options = ['#aaaaaa', '#bbbbbb', '#112211', 'darkslategrey'];\n        let newColor = options[Math.floor(Math.random() * (options.length))];\n\n        if (newColor !== this.state.color) {\n            this.setState({\n                color: newColor\n            },\n            () => {document.querySelector('body').style.backgroundColor = this.state.color}\n            );\n        }\n        // this.setState is asynchronous, for this reason we want to chain the color update inside it \n        // it can have a second argument, method has to be called as a (arrow) function\n    }\n\n    render() {\n        /* run function on link */\n        return(\n        <div className='is-white pad-20'>\n            <p>Current color: {this.state.color}</p>\n            <button onClick={() => this.randomColor()}>\n                Change background color\n            </button>\n        </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport Intro from './components/Intro';\nimport Background from './components/Background';\nimport ball from './img/ball_tras_640_i.png';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Intro />\n        <img className=\"App-logo\" src={ball} alt=\"basketball\" />\n      </header>\n      <p className=\"is-white\">Some works on:</p>\n      <a\n        className=\"link1\"\n        href=\"http://nicolag.it\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        title=\"nicolag\"\n      >\n        nicolag.it\n        </a>\n      <Background />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ball_tras_640_i.f16fd25e.png\";"],"sourceRoot":""}